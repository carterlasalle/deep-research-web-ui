# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or bigger project that might need to test across
#   multiple Python versions, consider removing this and adding the
#   specific `.python-version` you use for development to your
#   project's `.gitignore` file instead.
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include
#   Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific
#   dependencies or dependencies having no cross-platform support,
#   it is recommended to ignore the Pipfile.lock file.
#
#   Whether to ignore the Pipfile.lock file or not depends on your
#   needs.
#
#   https://github.com/pypa/pipenv/issues/598#issuecomment-285351571
#   https://github.com/pypa/pipenv/issues/598#issuecomment-357769542
#
# Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include
#   poetry.lock in version control.
#   However, this might cause problems if the project is developed
#   in multiple environments (e.g. developer with different OS).
#
#   Whether to ignore the poetry.lock file or not depends on your
#   needs.
#
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
# poetry.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# node modules
node_modules/

# ignore test directory
test/

# ignore the output directory
dist/

# ignore the template directory
# templates/

# ignore the requirements file (it should be tracked, but this is an example)
# requirements.txt

# ignore start script
# start.sh

# ignore specific file in root
thi.txt

# client specific
client/node_modules/